# Este dockerfile realiza 2 tareas:
# Empaqueta el proyecto. Es importante que el proyecto tenga la configuracion de la base de datos Postgres correcta.
# Levanta el servidor web del proyecto Spring con Jetty. 

# 1. Etapa de Construcci√≥n (Build Stage) üõ†Ô∏è
# Genera el war para publicar
FROM maven:3-openjdk-11 AS build
COPY . /usr/src/app
WORKDIR /usr/src/app
RUN mvn clean package -DskipTests

# 2. Etapa de Ejecuci√≥n (Runtime Stage) üöÄ
FROM openjdk:11

ENV JETTY_VERSION=9.4.56.v20240826
ENV JETTY_HOME=/opt/jetty

RUN apt-get update && apt-get install -y wget && \
    mkdir -p $JETTY_HOME && \
    wget https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-distribution/${JETTY_VERSION}/jetty-distribution-${JETTY_VERSION}.tar.gz && \
    tar -xzvf jetty-distribution-${JETTY_VERSION}.tar.gz -C $JETTY_HOME --strip-components=1 && \
    rm jetty-distribution-${JETTY_VERSION}.tar.gz

COPY --from=build /usr/src/app/target/tallerwebi-base-1.0-SNAPSHOT.war $JETTY_HOME/webapps/spring.war

# Expone el puerto 80 en el que Jetty correr√°.
EXPOSE 80

# Me paro en el directorio de Jetty.
WORKDIR $JETTY_HOME

# Comando para iniciar Jetty en el puerto 80.
CMD ["java", "-jar", "start.jar", "jetty.http.port=80"]